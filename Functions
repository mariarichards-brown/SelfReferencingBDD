# in this script we are going to store all our functions



# this was built for a lot of participants in one csv file
cleaningTaskData_exp1 <- function(printFiles) {
  # name of files
  files <- list.files("data_exp1/data_exp_103878-v6/")
  
  ############################################################################ #
  # general characteristics; gufs
  gen <- read.csv(paste0("data_exp1/data_exp_103878-v6/",files[grepl("gufs",files)]))
  gen <- data.frame(partId=gen$Participant.Private.ID[gen$Question.Key == "response-2"],
                    age=as.integer(gen$Response[gen$Question.Key == "response-3"]),
                    sex=gen$Response[gen$Question.Key == "response-2"])
  gen <- gen[order(gen$partId),]
  
  
  ############################################################################ #
  # bddq (body dismorphia): yd8j
  relCols <- c("Participant.Private.ID","Question.Key","Response")
  bddq <- read.csv(paste0("data_exp1/data_exp_103878-v6/",files[grepl("yd8j",files)]))
  bddq <- bddq[,relCols]
  # filter by rows
  bddq <- bddq[grepl("Ans",bddq$Question.Key) & 
                 !grepl("quantised",bddq$Question.Key),]
  # remove text items
  bddq <- bddq[!(bddq$Question.Key == "Ans3g" |
                   bddq$Question.Key == "Ans3c" |
                   bddq$Question.Key == "Ans1c" | 
                   bddq$Question.Key == "Ans3e"),]
  # create points
  bddq$points <- ifelse(bddq$Response == "Yes" |
                          bddq$Response == "1-3 hours a day" |
                          bddq$Response == "More than 3 hours a day",1,0)
  # participants id vector
  partIds <- unique(bddq$Participant.Private.ID)
  # BDDQ scoring algorithm
  for (i in 1:length(partIds)) {
    temp <- bddq[bddq$Participant.Private.ID == partIds[i],]
    counter <- 0
    # counting the first two questions
    if (temp$points[1] == 1) {
      counter <- counter + 1
      if (temp$points[2] == 1) {
        counter <- counter + 1
      }
    }
    # counting the rest of the questions given question 1 and 2 are "yes"
    if (counter == 2) {
      temp <- temp[-(1:2),]
      if (sum(temp$points[1:5]) > 0) {
        counter <- counter + 1
      }
      counter <- counter + temp$points[nrow(temp)]
    }
    
    output <- data.frame(Participant.Private.ID = partIds[i],
                         score = counter)
    # merge participants
    if (i == 1) {
      bddq_mat <- output
    } else {
      bddq_mat <- rbind(bddq_mat,output)
    }
  }
  
  colnames(bddq_mat) <- c("partId","bddq")
  bddq_mat <- bddq_mat[order(bddq_mat$partId),]
  
  
  # sanity check
  sum(bddq_mat$partId==gen$partId)
  
  wf <- data.frame(gen,bddq=bddq_mat$bddq)
  
  if (printFiles == 1) {
    write.csv(wf,"data_exp1/wideFormat_e1.csv",row.names = F)
  }
  
  
  ############################################################################ #
  # # # Self-referentiality
  # sxtc, gq5i, fspv
  sr.1 <- read.csv(paste0("data_exp1/data_exp_103878-v6/",files[grepl("sxtc",files)]))
  sr.2 <- read.csv(paste0("data_exp1/data_exp_103878-v6/",files[grepl("gq5i",files)]))
  sr.3 <- read.csv(paste0("data_exp1/data_exp_103878-v6/",files[grepl("fspv",files)]))
  
  # combining 3 nodes
  sr <- rbind(sr.1, sr.2, sr.3)
  
  relCols <- c("Participant.Private.ID","Task.Name","Spreadsheet..randomisation",
               "Trial.Number","Screen","Spreadsheet..Shape",
               "Spreadsheet..Word","Spreadsheet..Match","Response",
               "Reaction.Time","Correct")
  sr <- sr[,relCols]
  # select only response rows
  sr <- sr[sr$Screen == "objectLabelPairing",]
  sr$Screen <- NULL
  # number of participants
  nPart <- length(unique(sr$Participant.Private.ID))
  # change weird gorilla variable name for "friend"
  sr$Spreadsheet..Word <- ifelse(sr$Spreadsheet..Word == "${store:FriendName}",
                                 "Friend",sr$Spreadsheet..Word)
  # change column names
  colnames(sr) <- c("partId","selfShape","nBlock","nTrial","shape","word",
                    "match","resp","rt","corr")
  sr$word <- factor(sr$word, levels=c("You","Friend","Stranger"))
  if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
  p1 <- ggplot(sr, aes(x=word,y=corr,col=match)) + 
    labs(title="self-referentiality",y="Correct (%)", x="Word", col="Match") +
    stat_summary() +
    theme_classic() + theme(axis.text.x = element_text(angle = 30,hjust=1))
  p2 <- ggplot(sr, aes(x=word,y=rt,col=match)) + 
    labs(title="self-referentiality",y="Reaction Time", x="Word", col="Match") +
    stat_summary() +
    theme_classic() + theme(axis.text.x = element_text(angle = 30,hjust=1))
  if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr)
  p_sr <- ggarrange(p1,p2, common.legend = T)
  p_sr
  
  if (printFiles == 1) {
    write.csv(sr,"data_exp1/exp1.csv",row.names = F)
    ggsave("figures/exp1.png",plot = p_sr, width = 12, height = 9, 
           dpi = 900, units = "cm",limitsize = T)
  }
  
  # return 
  return(list(lf=sr,wf=wf))
}


cleaningTaskData_exp2a <- function(printFiles) {
  # name of files
  files <- list.files("data_exp2/data_exp_131782-v4/")
  
  ############################################################################ #
  # general characteristics; 71it
  gen <- read.csv(paste0("data_exp2/data_exp_131782-v4/",files[grepl("71it",files)]))
  gen <- data.frame(partId=gen$Participant.Private.ID[gen$Question.Key == "response-2"],
                    age=as.integer(gen$Response[gen$Question.Key == "response-3"]),
                    sex=gen$Response[gen$Question.Key == "response-2"])
  gen <- gen[order(gen$partId),]
  
 
  ############################################################################ #
  # gad-7; gwcc
  gad <- read.csv(paste0("data_exp2/data_exp_131782-v4/",files[grepl("gwcc",files)]))
  
  
  ############################################################################ #
  # bddq (body dismorphia): 3n6g
  relCols <- c("Participant.Private.ID","Question.Key","Response")
  bddq <- read.csv(paste0("data_exp2/data_exp_131782-v4/",files[grepl("3n6g",files)]))
  bddq <- bddq[,relCols]
  # filter by rows
  bddq <- bddq[grepl("Ans",bddq$Question.Key) & 
                 !grepl("quantised",bddq$Question.Key),]
  # remove text items
  bddq <- bddq[!(bddq$Question.Key == "Ans3g" |
                   bddq$Question.Key == "Ans3c" |
                   bddq$Question.Key == "Ans1c" | 
                   bddq$Question.Key == "Ans3e"),]
  # create points
  bddq$points <- ifelse(bddq$Response == "Yes" |
                          bddq$Response == "1-3 hours a day" |
                          bddq$Response == "More than 3 hours a day",1,0)
  # participants id vector
  partIds <- unique(bddq$Participant.Private.ID)
  # BDDQ scoring algorithm
  for (i in 1:length(partIds)) {
    temp <- bddq[bddq$Participant.Private.ID == partIds[i],]
    counter <- 0
    # counting the first two questions
    if (temp$points[1] == 1) {
      counter <- counter + 1
      if (temp$points[2] == 1) {
        counter <- counter + 1
      }
    }
    # counting the rest of the questions given question 1 and 2 are "yes"
    if (counter == 2) {
      temp <- temp[-(1:2),]
      if (sum(temp$points[1:5]) > 0) {
        counter <- counter + 1
      }
      counter <- counter + temp$points[nrow(temp)]
    }
    
    output <- data.frame(Participant.Private.ID = partIds[i],
                         score = counter)
    # merge participants
    if (i == 1) {
      bddq_mat <- output
    } else {
      bddq_mat <- rbind(bddq_mat,output)
    }
  }
  
  colnames(bddq_mat) <- c("partId","bddq")
  bddq_mat <- bddq_mat[order(bddq_mat$partId),]
  
 
  ############################################################################ #
  # phq-8 (depression): glmn
  phq8 <- read.csv(paste0("data_exp2/data_exp_131782-v4/",files[grepl("glmn",files)]))
  relCols <- c("Participant.Private.ID","Question","Object.Name","Response.Type","Key","Response")
  phq8 <- phq8[,relCols]
  phq8 <- phq8[phq8$Response.Type == "response" & phq8$Key == "value",]
  phq8$Response.Type <- phq8$Key <- NULL
  colnames(phq8) <- c("partId","quest","itemNum","resp")
  phq8$itemNum <- as.integer(substr(phq8$itemNum,10,nchar(phq8$itemNum)))
  phq8$resp <- as.integer(phq8$resp)
  # subject vector
  subj <- unique(phq8$partId)[order(unique(phq8$partId))]
  phq8 <- phq8[order(phq8$partId,phq8$itemNum),]
  # wide data base
  phq8_mat <- data.frame(subj,matrix(NA,nrow=length(subj),ncol=8))
  colnames(phq8_mat) <- c("partId",1:8)
  for (i in 1:length(subj)) {
    temp <- phq8[phq8$partId == subj[i],]
    phq8_mat[i,2:9] <- temp$resp
  }
  phq8_mat$phq <- rowSums(phq8_mat[,2:9])
  
  # sannity check
  sum(gen$partId==phq8_mat$partId)
  sum(bddq_mat$partId==phq8_mat$partId)
  
  wf <- data.frame(gen,bddq=bddq_mat$bddq,phq8_mat[,-1])
  
  if (printFiles == 1) {
    write.csv(wf,"data_exp2/wideFormat_e2a.csv",row.names = F)
  }

  
  ############################################################################ #
  # # # Self-referentiality
  # l9cz, tgm9, nb2e
  sr.1 <- read.csv(paste0("data_exp2/data_exp_131782-v4/",files[grepl("h7qi",files)]))
  sr.2 <- read.csv(paste0("data_exp2/data_exp_131782-v4/",files[grepl("hudf",files)]))
  sr.3 <- read.csv(paste0("data_exp2/data_exp_131782-v4/",files[grepl("y6d3",files)]))
  
  # combining 3 nodes
  sr <- rbind(sr.1, sr.2, sr.3)

  relCols <- c("Participant.Private.ID","Task.Name","Spreadsheet..randomisation",
               "Trial.Number","Screen","Spreadsheet..Shape",
               "Spreadsheet..Word","Spreadsheet..Match","Response",
               "Reaction.Time","Correct")
  sr <- sr[,relCols]
  # select only response rows
  sr <- sr[sr$Screen == "objectLabelPairing",]
  sr$Screen <- NULL
  # number of participants
  nPart <- length(unique(sr$Participant.Private.ID))
  # change weird gorilla variable name for "friend"
  sr$Spreadsheet..Word <- ifelse(sr$Spreadsheet..Word == "${store:FriendName}",
                                 "Friend",sr$Spreadsheet..Word)
  # change column names
  colnames(sr) <- c("partId","selfShape","nBlock","nTrial","shape","word",
                    "match","resp","rt","corr")
  sr$word <- factor(sr$word, levels=c("You","Friend","Stranger"))
  if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
  p1 <- ggplot(sr, aes(x=word,y=corr,col=match)) + 
    labs(title="self-referentiality",y="Correct (%)", x="Word", col="Match") +
    stat_summary() +
    theme_classic() + theme(axis.text.x = element_text(angle = 30,hjust=1))
  p2 <- ggplot(sr, aes(x=word,y=rt,col=match)) + 
    labs(title="self-referentiality",y="Reaction Time", x="Word", col="Match") +
    stat_summary() +
    theme_classic() + theme(axis.text.x = element_text(angle = 30,hjust=1))
  if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr)
  p_sr <- ggarrange(p1,p2, common.legend = T)
  p_sr
  
  if (printFiles == 1) {
    write.csv(sr,"data_exp2/exp2a.csv",row.names = F)
    ggsave("figures/exp2a.png",plot = p_sr, width = 12, height = 9, 
           dpi = 900, units = "cm",limitsize = T)
  }
 
  # return 
  return(list(lf=sr,wf=wf))
}


cleaningTaskData_exp2b <- function(printFiles) {
  
  # this data was collected in the 2023 Learning Theory and Psychopathology 
  # block practical (robin.murphy@psy.ox.ac.uk)
  # loc <- "C:/Users/owner/OneDrive - Yale University/Oxford/5.- Experiments/2023 Block Practical"
  ############################################################################ #
  # Version 8
  files <- list.files("data_exp2/data_exp_131782-v4/")
  files <- list.files(paste0(loc,"/data_exp_133185-v8/"))
  gen1 <- read.csv(paste0(loc,"/data_exp_133185-v8/",files[grepl("vuv1",files)]))
  # # # Self-referentiality
  # l9cz, tgm9, nb2e
  r0_sr.1 <- read.csv(paste0(loc,"/data_exp_133185-v8/",files[grepl("l9cz",files)]))
  r0_sr.2 <- read.csv(paste0(loc,"/data_exp_133185-v8/",files[grepl("tgm9",files)]))
  r0_sr.3 <- read.csv(paste0(loc,"/data_exp_133185-v8/",files[grepl("nb2e",files)]))
  # phq-8 (depression): e2mj
  phq8_v8 <- read.csv(paste0(loc,"/data_exp_133185-v8/",files[grepl("e2mj",files)]))
  # bddq (body dismorphia): x37p
  bddq_v8 <- read.csv(paste0(loc,"/data_exp_133185-v8/",files[grepl("x37p",files)]))
  
  ############################################################################ #
  # Version 9
  files <- list.files(paste0(loc,"/data_exp_133185-v9/"))
  gen2 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("vuv1",files)]))
  # Version 9
  # # # Self-referentiality
  # wa2g, ngtv, rf54
  r1_sr.1 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("wa2g",files)]))
  r1_sr.2 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("ngtv",files)]))
  r1_sr.3 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("rf54",files)]))
  # # # Self-referentiality
  # l9cz, tgm9, nb2e
  r2_sr.1 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("l9cz",files)]))
  r2_sr.2 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("tgm9",files)]))
  r2_sr.3 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("nb2e",files)]))
  # # # Self-referentiality
  # c88w, 33uv, uzb6
  r3_sr.1 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("c88w",files)]))
  r3_sr.2 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("33uv",files)]))
  r3_sr.3 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("uzb6",files)]))
  # phq-8 (depression): e2mj
  phq8_v9 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("e2mj",files)]))
  # bddq (body dismorphia): x37p
  bddq_v9 <- read.csv(paste0(loc,"/data_exp_133185-v9/",files[grepl("x37p",files)]))
  
  
  ############################################################################ #
  # general characteristics
  relCols <- c("Participant.Private.ID","Question.Key","Response")
  gen <- rbind(gen1[,relCols],gen2[,relCols])
  # gen <- gen[grepl("resp-",gen$Question.Key),]
  gen <- data.frame(partId=gen$Participant.Private.ID[gen$Question.Key == "resp-age"],
                    age=as.integer(gen$Response[gen$Question.Key == "resp-age"]),
                    sex=gen$Response[gen$Question.Key == "resp-sex"])
  gen <- gen[order(gen$partId),]

  
  # phq-8 (depression)
  relCols <- c("Participant.Private.ID","Question","Object.Name",
               "Response.Type","Key","Response")
  phq8_v8 <- phq8_v8[,relCols]
  phq8_v9 <- phq8_v9[,relCols]
  phq8 <- rbind(phq8_v8,phq8_v9)
  phq8 <- phq8[phq8$Response.Type == "response" & phq8$Key == "value",]
  phq8$Response.Type <- phq8$Key <- NULL
  colnames(phq8) <- c("partId","quest","itemNum","resp")
  phq8$itemNum <- as.integer(substr(phq8$itemNum,10,nchar(phq8$itemNum)))
  phq8$resp <- as.integer(phq8$resp)
  # subject vector
  subj <- unique(phq8$partId)[order(unique(phq8$partId))]
  phq8 <- phq8[order(phq8$partId,phq8$itemNum),]
  # wide data base
  phq8_mat <- data.frame(subj,matrix(NA,nrow=length(subj),ncol=8))
  colnames(phq8_mat) <- c("partId",1:8)
  for (i in 1:length(subj)) {
    temp <- phq8[phq8$partId == subj[i],]
    phq8_mat[i,2:9] <- temp$resp
  }
  phq8_mat$phq <- rowSums(phq8_mat[,2:9])
  
  
  ############################################################################ #
  # bddq (body dismorphia)
  relCols <- c("Participant.Private.ID","Question.Key","Response")
  bddq_v8 <- bddq_v8[,relCols]
  bddq_v9 <- bddq_v9[,relCols]
  bddq <- rbind(bddq_v8,bddq_v9)
  # filter by rows
  bddq <- bddq[grepl("Ans",bddq$Question.Key) & 
                 !grepl("quantised",bddq$Question.Key),]
  # remove text items
  bddq <- bddq[!(bddq$Question.Key == "Ans3g" |
                   bddq$Question.Key == "Ans3c" |
                   bddq$Question.Key == "Ans1c" | 
                   bddq$Question.Key == "Ans3e"),]
  # create points
  bddq$points <- ifelse(bddq$Response == "Yes" |
                          bddq$Response == "1-3 hours a day" |
                          bddq$Response == "More than 3 hours a day",1,0)
  # participants id vector
  partIds <- unique(bddq$Participant.Private.ID)
  # BDDQ scoring algorithm
  for (i in 1:length(partIds)) {
    temp <- bddq[bddq$Participant.Private.ID == partIds[i],]
    counter <- 0
    # counting the first two questions
    if (temp$points[1] == 1) {
      counter <- counter + 1
      if (temp$points[2] == 1) {
        counter <- counter + 1
      }
    }
    # counting the rest of the questions given question 1 and 2 are "yes"
    if (counter == 2) {
      temp <- temp[-(1:2),]
      if (sum(temp$points[1:5]) > 0) {
        counter <- counter + 1
      }
      counter <- counter + temp$points[nrow(temp)]
    }
    
    output <- data.frame(Participant.Private.ID = partIds[i],
                         score = counter)
    # merge participants
    if (i == 1) {
      bddq_mat <- output
    } else {
      bddq_mat <- rbind(bddq_mat,output)
    }
  }
  
  colnames(bddq_mat) <- c("partId","bddq")
  bddq_mat <- bddq_mat[order(bddq_mat$partId),]
  
  
  # sannity check
  sum(gen$partId==phq8_mat$partId)
  sum(bddq_mat$partId==phq8_mat$partId)
  
  wf <- data.frame(gen,bddq=bddq_mat$bddq,phq8_mat[,-1])
  
  if (printFiles == 1) {
    write.csv(wf,"data_exp2/wideFormat_e2b.csv",row.names = F)
  }
  
  
  ############################################################################ #
  # # # Self-referentiality
  sr_v8 <- rbind(r0_sr.1, r0_sr.2, r0_sr.3)
  sr_v9 <- rbind(r1_sr.1, r1_sr.2, r1_sr.3,
                 r2_sr.1, r2_sr.2, r2_sr.3,
                 r3_sr.1, r3_sr.2, r3_sr.3)
  relCols <- c("Participant.Private.ID","Task.Name","Spreadsheet..randomisation",
               "Trial.Number","Screen","Spreadsheet..Shape",
               "Spreadsheet..Word","Spreadsheet..Match","Response",
               "Reaction.Time","Correct")
  sr_v8 <- sr_v8[,relCols]
  sr_v9 <- sr_v9[,relCols]
  # combine versions
  sr <- rbind(sr_v8,sr_v9)
  # select only response rows
  sr <- sr[sr$Screen == "objectLabelPairing",]
  sr$Screen <- NULL
  # number of participants
  nPart <- length(unique(sr$Participant.Private.ID))
  # change weird gorilla variable name for "friend"
  sr$Spreadsheet..Word <- ifelse(sr$Spreadsheet..Word == "${store:FriendName}",
                                 "Friend",sr$Spreadsheet..Word)
  # change column names
  colnames(sr) <- c("partId","selfShape","nBlock","nTrial","shape","word",
                    "match","resp","rt","corr")
  sr$word <- factor(sr$word, levels=c("You","Friend","Stranger"))
  if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
  p1 <- ggplot(sr, aes(x=word,y=corr,col=match)) + 
    labs(title="self-referentiality",y="Correct (%)", x="Word", col="Match") +
    stat_summary() +
    theme_classic() + theme(axis.text.x = element_text(angle = 30,hjust=1))
  p2 <- ggplot(sr, aes(x=word,y=rt,col=match)) + 
    labs(title="self-referentiality",y="Reaction Time", x="Word", col="Match") +
    stat_summary() +
    theme_classic() + theme(axis.text.x = element_text(angle = 30,hjust=1))
  if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr)
  p_sr <- ggarrange(p1,p2, common.legend = T)
  p_sr
  
  if (printFiles == 1) {
    write.csv(sr,"data_exp2/exp2b.csv",row.names = F)
    ggsave("figures/exp2b.png",plot = p_sr, width = 12, height = 9, 
           dpi = 900, units = "cm",limitsize = T)
  }
  
  # return 
  return(list(lf=sr,wf=wf))
}

cleaningTaskData_exp3 <- function(printFiles) {
  
  # this data was collected in the 2023 Learning Theory and Psychopathology 
  # block practical (robin.murphy@psy.ox.ac.uk)
  #loc <- "C:/Users/owner/OneDrive - Yale University/Oxford/6.- lab people projects/extraction_test/Maria/data_exp3"
  ############################################################################ #
  # Version 8
  files <- list.files(paste0("data_exp3/data_exp_146409-v8/"))
  gen1 <- read.csv(paste0("data_exp3/data_exp_146409-v8/",files[grepl("71it",files)]))
  # # # Self-referentiality
  # hudf, h7qi, y6d3
  r0_sr.1 <- read.csv(paste0("data_exp3/data_exp_146409-v8/",files[grepl("hudf",files)]))
  r0_sr.2 <- read.csv(paste0("data_exp3/data_exp_146409-v8/",files[grepl("h7qi",files)]))
  r0_sr.3 <- read.csv(paste0("data_exp3/data_exp_146409-v8/",files[grepl("y6d3",files)]))
  # phq-8 (depression): glmn
  phq8_v8 <- read.csv(paste0("data_exp3/data_exp_146409-v8/",files[grepl("glmn",files)]))
  # bddq (body dismorphia): 3n6g
  bddq_v8 <- read.csv(paste0("data_exp3/data_exp_146409-v8/",files[grepl("3n6g",files)]))
  # BIS (impulsivity): kehh
  bis_v8 <- read.csv(paste0("data_exp3/data_exp_146409-v8/",files[grepl("kehh",files)]))
  # GAD (General Anxiety Disorder): gwcc
  gad_v8 <- read.csv(paste0("data_exp3/data_exp_146409-v8/",files[grepl("gwcc",files)]))
  
  
  
  ############################################################################ #
  # general characteristics
  relCols <- c("Participant.Private.ID","Question.Key","Response")
  gen <- rbind(gen1[,relCols])
  # gen <- gen[grepl("resp-",gen$Question.Key),]
  gen <- data.frame(partId=gen$Participant.Private.ID[gen$Question.Key == "response-3"],
                    age=as.integer(gen$Response[gen$Question.Key == "response-3"]),
                    sex=gen$Response[gen$Question.Key == "response-1"])
  gen <- gen[order(gen$partId),]
  
  
  ############################################################################ #
  # phq-8 (depression)
  relCols <- c("Participant.Private.ID","Question","Object.Name",
               "Response.Type","Key","Response")
  phq8 <- rbind(phq8_v8[,relCols])
  phq8 <- phq8[phq8$Response.Type == "response" & phq8$Key == "value",]
  phq8$Response.Type <- phq8$Key <- NULL
  colnames(phq8) <- c("partId","quest","itemNum","resp")
  phq8$itemNum <- as.integer(substr(phq8$itemNum,10,nchar(phq8$itemNum)))
  phq8$resp <- as.integer(phq8$resp)
  # subject vector
  subj <- unique(phq8$partId)[order(unique(phq8$partId))]
  phq8 <- phq8[order(phq8$partId,phq8$itemNum),]
  # wide data base
  phq8_mat <- data.frame(subj,matrix(NA,nrow=length(subj),ncol=8))
  colnames(phq8_mat) <- c("partId",1:8)
  for (i in 1:length(subj)) {
    temp <- phq8[phq8$partId == subj[i],]
    phq8_mat[i,2:9] <- temp$resp
  }
  phq8_mat$phq <- rowSums(phq8_mat[,2:9])
  
  
  ############################################################################ #
  # bddq (body dismorphia)
  relCols <- c("Participant.Private.ID","Question.Key","Response")
  bddq <- rbind(bddq_v8[,relCols])
  # filter by rows
  bddq <- bddq[grepl("Ans",bddq$Question.Key) & 
                 !grepl("quantised",bddq$Question.Key),]
  # remove text items
  bddq <- bddq[!(bddq$Question.Key == "Ans3g" |
                   bddq$Question.Key == "Ans3c" |
                   bddq$Question.Key == "Ans1c" | 
                   bddq$Question.Key == "Ans3e"),]
  # create points
  bddq$points <- ifelse(bddq$Response == "Yes" |
                          bddq$Response == "1-3 hours a day" |
                          bddq$Response == "More than 3 hours a day",1,0)
  # participants id vector
  partIds <- unique(bddq$Participant.Private.ID)
  # BDDQ scoring algorithm
  for (i in 1:length(partIds)) {
    temp <- bddq[bddq$Participant.Private.ID == partIds[i],]
    counter <- 0
    # counting the first two questions
    if (temp$points[1] == 1) {
      counter <- counter + 1
      if (temp$points[2] == 1) {
        counter <- counter + 1
      }
    }
    # counting the rest of the questions given question 1 and 2 are "yes"
    if (counter == 2) {
      temp <- temp[-(1:2),]
      if (sum(temp$points[1:5]) > 0) {
        counter <- counter + 1
      }
      counter <- counter + temp$points[nrow(temp)]
    }
    
    output <- data.frame(Participant.Private.ID = partIds[i],
                         score = counter)
    # merge participants
    if (i == 1) {
      bddq_mat <- output
    } else {
      bddq_mat <- rbind(bddq_mat,output)
    }
  }
  
  colnames(bddq_mat) <- c("partId","bddq")
  bddq_mat <- bddq_mat[order(bddq_mat$partId),]
  
  
  ############################################################################ #
  # BIS (impulsivity)
  relCols <- c("Participant.Private.ID","Question","Key","Response")
  bis <- rbind(bis_v8[,relCols])
  bis <- bis[bis$Key == "quantised",]
  bis$Key <- NULL
  colnames(bis) <- c("partId","quest","resp")
  bis$itemNum <- as.numeric(gsub("([0-9]+).*$", "\\1", bis$quest))
  bis$resp <- as.integer(bis$resp)
  # subject vector
  subj <- unique(bis$partId)[order(unique(bis$partId))]
  bis <- bis[order(bis$partId,bis$itemNum),]
  # wide data base
  bis_mat <- data.frame(subj,matrix(NA,nrow=length(subj),ncol=length(unique(bis$itemNum))))
  colnames(bis_mat) <- c("partId",1:length(unique(bis$itemNum)))
  for (i in 1:length(subj)) {
    temp <- bis[bis$partId == subj[i],]
    bis_mat[i,2:ncol(bis_mat)] <- temp$resp
  }
  bis_mat$bis <- rowSums(bis_mat[,2:ncol(bis_mat)])
  
  
  
  ############################################################################ #
  # GAD (General Anxiety Disorder)
  relCols <- c("Participant.Private.ID","Question","Key","Response")
  gad <- rbind(gad_v8[,relCols])
  gad <- gad[gad$Key == "value",]
  gad$Key <- NULL
  colnames(gad) <- c("partId","quest","resp")
  gad$resp <- as.integer(gad$resp)
  # subject vector
  subj <- unique(gad$partId)[order(unique(gad$partId))]
  gad <- gad[order(gad$quest),]
  # wide data base
  gad_mat <- data.frame(subj,matrix(NA,nrow=length(subj),ncol=7))
  colnames(gad_mat) <- c("partId",1:7)
  for (i in 1:length(subj)) {
    temp <- gad[gad$partId == subj[i],]
    gad_mat[i,2:ncol(gad_mat)] <- temp$resp
  }
  gad_mat$gad <- rowSums(gad_mat[,2:ncol(gad_mat)])
  
  
  
  # sanity check
  sum(gen$partId==phq8_mat$partId)
  sum(bddq_mat$partId==phq8_mat$partId)
  sum(bis_mat$partId==gen$partId)
  sum(bddq_mat$partId==gad_mat$partId)
    
  # combining general demographics with bddq and phq8
  wf <- data.frame(gen,bddq=bddq_mat$bddq,phq8_mat[,-1],bis=bis_mat$bis,gad=gad_mat$gad)
  
  if (printFiles == 1) {
    write.csv(wf,"data_exp3/wideFormat_e3.csv",row.names = F)
  }
  
  
  ############################################################################ #
  # # # Self-referentiality
  sr_v8 <- rbind(r0_sr.1, r0_sr.2, r0_sr.3)
  relCols <- c("Participant.Private.ID","Task.Name","Spreadsheet..randomisation",
               "Trial.Number","Screen","Spreadsheet..Shape",
               "Spreadsheet..Word","Spreadsheet..Match","Response",
               "Reaction.Time","Correct")
  # combine versions
  sr <- rbind(sr_v8[,relCols])
  # select only response rows
  sr <- sr[sr$Screen == "objectLabelPairing",]
  sr$Screen <- NULL
  # number of participants
  nPart <- length(unique(sr$Participant.Private.ID))
  # change weird gorilla variable name for "friend"
  sr$Spreadsheet..Word <- ifelse(sr$Spreadsheet..Word == "${store:FriendName}",
                                 "Friend",sr$Spreadsheet..Word)
  # change column names
  colnames(sr) <- c("partId","selfShape","nBlock","nTrial","shape","word",
                    "match","resp","rt","corr")
  sr$word <- factor(sr$word, levels=c("You","Friend","Stranger"))
  if (!require(ggplot2)) {install.packages("ggplot2")}; library(ggplot2)
  p1 <- ggplot(sr, aes(x=word,y=corr,col=match)) + 
    labs(title="self-referentiality",y="Correct (%)", x="Word", col="Match") +
    stat_summary() +
    theme_classic() + theme(axis.text.x = element_text(angle = 30,hjust=1))
  p2 <- ggplot(sr, aes(x=word,y=rt,col=match)) + 
    labs(title="self-referentiality",y="Reaction Time", x="Word", col="Match") +
    stat_summary() +
    theme_classic() + theme(axis.text.x = element_text(angle = 30,hjust=1))
  if (!require(ggpubr)) {install.packages("ggpubr")}; library(ggpubr)
  p_sr <- ggarrange(p1,p2, common.legend = T)
  p_sr
  
  if (printFiles == 1) {
    write.csv(sr,"data_exp3/exp3.csv",row.names = F)
    ggsave("figures/exp3.png",plot = p_sr, width = 12, height = 9, 
           dpi = 900, units = "cm",limitsize = T)
  }
  
  # return 
  return(list(lf=sr,wf=wf))
}


addQuestionnairesToLF <- function(lf,wf) {
  subjs <- wf$partId
  quests <- c("bddq","phq","bis","gad","sex","age")
  lf$bddq <- lf$phq <- lf$bis <- lf$sex <- lf$age <- NA
  for (i in 1:length(subjs)) {
    for (j in 1:length(quests)) {
      lf[lf$partId == subjs[i],quests[j]] <- wf[i,quests[j]] 
    } 
    # lf$bddq[lf$partId == subjs[i]] <- wf$bddq[i] 
    # lf$phq[lf$partId == subjs[i]] <- wf$phq[i]
    # lf$bis[lf$partId == subjs[i]] <- wf$bis[i]
    # lf$sex[lf$partId == subjs[i]] <- wf$sex[i]
    # lf$age[lf$partId == subjs[i]] <- wf$age[i]
  }
  return(lf)
}


# categorical descriptive variable
f_descrCategorical <- function(vec) {return(matrix(c(levels(as.factor(vec)),table(vec),(table(vec) / length(vec)) * 100),
                                                   nrow=length(levels(as.factor(vec)))))}
# continuous descriptive variable
f_descrContinuous <- function(vec) {return(c(sum(!is.na(vec)),
                                             mean(vec, na.rm = T),
                                             sd(vec, na.rm = T),
                                             range(vec, na.rm = T)))}
